"0","############################################################"
"0","# Movielens Recommendation System (Capstone Project)"
"0","# By Richard Jonyo"
"0","# Purpose: Calculate RMSE to be used to evaluate how close the predictions are to the true values in the validation set"
"0","###########################################################"
"0",""
"0",""
"0","##########################################################"
"0","# Create edx set, validation set (final hold-out test set)"
"0","##########################################################"
"0",""
"0","# Note: this process could take a couple of minutes"
"0",""
"0","if(!require(tidyverse)) install.packages(""tidyverse"", repos = ""http://cran.us.r-project.org"")"
"0","if(!require(caret)) install.packages(""caret"", repos = ""http://cran.us.r-project.org"")"
"0","if(!require(data.table)) install.packages(""data.table"", repos = ""http://cran.us.r-project.org"")"
"0",""
"0","library(tidyverse)"
"0","library(caret)"
"0","library(data.table)"
"0","library(lubridate)"
"0",""
"0","# MovieLens 10M dataset:"
"0","# https://grouplens.org/datasets/movielens/10m/"
"0","# http://files.grouplens.org/datasets/movielens/ml-10m.zip"
"0",""
"0","dl <- tempfile()"
"0","download.file(""http://files.grouplens.org/datasets/movielens/ml-10m.zip"", dl)"
"2","trying URL 'http://files.grouplens.org/datasets/movielens/ml-10m.zip'
"
"2","Content type 'application/zip'"
"2"," length 65566137 bytes (62.5 MB)
"
"2","downloaded 62.5 MB

"
"0","ratings <- fread(text = gsub(""::"", ""\t"", readLines(unzip(dl, ""ml-10M100K/ratings.dat""))),"
"0","                 col.names = c(""userId"", ""movieId"", ""rating"", ""timestamp""))"
"0",""
"0","movies <- str_split_fixed(readLines(unzip(dl, ""ml-10M100K/movies.dat"")), ""\\::"", 3)"
"0","colnames(movies) <- c(""movieId"", ""title"", ""genres"")"
"0",""
"0","# if using R 4.0 or later:"
"0","movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(movieId),"
"0","                                           title = as.character(title),"
"0","                                           genres = as.character(genres))"
"0",""
"0",""
"0","movielens <- left_join(ratings, movies, by = ""movieId"")"
"0",""
"0","# Validation set will be 10% of MovieLens data"
"0","set.seed(1, sample.kind=""Rounding"") # if using R 3.5 or earlier, use `set.seed(1)`"
"2","non-uniform 'Rounding' sampler used"
"0","test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)"
"0","edx <- movielens[-test_index,]"
"0","temp <- movielens[test_index,]"
"0",""
"0","# Make sure userId and movieId in validation set are also in edx set"
"0","validation <- temp %>% "
"0","  semi_join(edx, by = ""movieId"") %>%"
"0","  semi_join(edx, by = ""userId"")"
"0",""
"0","# Add rows removed from validation set back into edx set"
"0","removed <- anti_join(temp, validation)"
"2","Joining, by = c(""userId"", ""movieId"", ""rating"", ""timestamp"", ""title"", ""genres"")
"
"0","edx <- rbind(edx, removed)"
"0",""
"0","rm(dl, ratings, movies, test_index, temp, movielens, removed)"
"0",""
"0",""
"0","#The edx dataset has 9,000,055 observations and 6 columns"
"0","#Each observation is a rating provided by a user for a movie"
"0","#We divide it into two sets: training and test sets"
"0","#The test set will be split into two to be used in our algorithm and for testing"
"0","test_dataset <- createDataPartition(y = edx$rating, times = 1, p = 0.1, list = FALSE)"
"0","training_dataset <- edx[-test_dataset,]"
"0","temp <- edx[test_dataset,]"
"0","dim(test_dataset) #test set has 900007 records"
"1","[1]"
"1"," 900007"
"1","      1"
"1","
"
"0","dim(training_dataset) #training set has 8100048 records"
"1","[1]"
"1"," 8100048"
"1","       6"
"1","
"
"0","#We ensure that the userId and movieId are in both training and test sets"
"0","test_dataset <- temp %>%"
"0","  semi_join(training_dataset, by = ""movieId"") %>%"
"0","  semi_join(training_dataset, by = ""userId"") "
"0",""
"0","# We add the rows removed from or test dataset into training set"
"0","removed_rows <- anti_join(temp, test_dataset)"
"2","Joining, by = c(""userId"", ""movieId"", ""rating"", ""timestamp"", ""title"", ""genres"")
"
"0","training_dataset <- rbind(training_dataset, removed_rows)"
"0","#rm(test_dataset, temp, removed_rows)"
"0",""
"0","##EXPLORATORY ANALYSIS##"
"0","head(edx) #Preview edx"
